import { Connection } from 'mysql';
import { Client } from 'pg';
import { Database } from 'sqlite3';
export interface Migration {
    id: number;
    name: string;
    run_on: Date;
    created: Date;
    error_if_happened: string;
}
export interface CommandDescription {
    description: string;
    run: Function;
    skipInit?: boolean;
}
export interface NameCreated {
    name: string;
    created: Date;
}
export interface Config {
    directoryWithScripts: string;
    dateFormat?: string;
    driver: Driver;
    logger?: Logger;
}
export interface MigrationQueryResult<T> {
    error: string | null;
    rows: T[];
}
export interface Logger {
    success(text: string): void;
    info(text: string): void;
    infoParams(text: string, ...params: string[]): void;
    infoParamsColor(text: string, ...params: Param[]): void;
    colors: {
        [id: string]: string;
    };
}
export declare class ColoredLogger implements Logger {
    colors: {
        [id: string]: string;
    };
    success(text: string): void;
    info(text: string): void;
    infoParams(text: string, ...params: string[]): void;
    infoParamsColor(text: string, ...params: Param[]): void;
}
export interface Param {
    color: string;
    param: string;
}
export interface Driver {
    getDbMigrations(): string;
    removeAllMigrations(): string;
    getFailedMigrations(): string;
    markExecuted(): string;
    createUniqueTableIndex(): string;
    query<T>(sql: string, params: unknown[]): Promise<string | null>;
    readQuery<T>(sql: string, params: unknown[]): Promise<MigrationQueryResult<T>>;
    isInitedSql(): string;
    createTableSql(): string;
    executeMultipleStatements<T>(sql: string): Promise<string | null>;
}
export declare abstract class CommonDriver<T> implements Driver {
    dbRunner: T;
    migrationTable: string;
    constructor(dbRunner: T, migrationTable?: string);
    getSeparator(): () => string;
    getDbMigrations(): string;
    removeAllMigrations(): string;
    getFailedMigrations(): string;
    markExecuted(): string;
    createUniqueTableIndex(): string;
    abstract readQuery<T>(sql: string, params: unknown[]): Promise<MigrationQueryResult<T>>;
    query(sql: string, params: unknown[]): Promise<string | null>;
    executeMultipleStatements(sql: string): Promise<string | null>;
    abstract isInitedSql(): string;
    abstract createTableSql(): string;
    extractError(e: {
        message?: string;
    } | null): string | null;
}
export declare class PsqlDriver extends CommonDriver<Client> {
    isInitedSql(): string;
    getSeparator(): () => string;
    createTableSql(): string;
    readQuery<T>(sql: string, params: unknown[]): Promise<MigrationQueryResult<T>>;
}
export declare class SQLite3Driver extends CommonDriver<Database> {
    isInitedSql(): string;
    query(sql: string, params: unknown[]): Promise<string | null>;
    executeMultipleStatements<T>(sql: string): Promise<string | null>;
    readQuery<T>(sql: string, params: unknown[]): Promise<MigrationQueryResult<T>>;
    createTableSql(): string;
}
export declare class MysqlDriver extends CommonDriver<Connection> {
    isInitedSql(): string;
    createTableSql(): string;
    readQuery<T>(sql: string, params: unknown[]): Promise<MigrationQueryResult<T>>;
}
export declare class CommandsRunner {
    driver: Driver;
    directoryWithScripts: string;
    dateFormat: string;
    logger: Logger;
    commands: {
        [name: string]: CommandDescription;
    };
    constructor({ directoryWithScripts, dateFormat, driver, logger }: Config);
    runSql(sql: string, params: unknown[]): Promise<void>;
    readSql<T>(sql: string, params: unknown[]): Promise<T[]>;
    checkIfExists(): Promise<boolean>;
    doInit(): Promise<void>;
    getScriptStr(script: string): Promise<string>;
    getFilesMigrations(exclude: Migration[]): Promise<NameCreated[]>;
    runScript(fileName: string, created: Date, failSilently: boolean): Promise<void>;
    markExecuted(fileName: string, created: Date, migrationErr: string | null): Promise<void>;
    findNewMigrations(failSilently: boolean): Promise<NameCreated[]>;
    getDbMigrations(): Promise<Migration[]>;
    getCompletedMigrations(failSilently: boolean): Promise<Migration[]>;
    runMigrations(allScript: NameCreated[], failSilently: boolean): Promise<void>;
    markExecutedAll(allScript: NameCreated[]): Promise<void>;
    getFailedMigrations(): Promise<number>;
    resolveAllMigrations(): Promise<void>;
    run(command: 'init' | 'fake' | 'list' | 'migrate' | 'forceMigrate' | 'resolve' | 'getFailed' | 'help'): Promise<void>;
    printHelp(): void;
    findAndRunMigrations(failSilently: boolean): Promise<void>;
    fakeAllScripts(): Promise<void>;
    printMigrations(migrations: NameCreated[]): void;
    printNewMigrations(): Promise<void>;
}
